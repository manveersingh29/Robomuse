<?xml version="1.0"?>
<robot name="robomuse" xmlns:xacro="http://www.ros.org/wiki/xacro">


  <!-- differential drive -->
  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <alwaysOn>true</alwaysOn>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <odometrySource>world</odometrySource>
      <publishOdomTF>true</publishOdomTF>
      <robotBaseFrame>base_link</robotBaseFrame>
      <publishWheelTF>false</publishWheelTF>
      <publishTf>true</publishTf>
      <publishWheelJointState>true</publishWheelJointState>
      <legacyMode>false</legacyMode>
      <updateRate>30</updateRate>
      <leftJoint>chassis_to_left_wheel</leftJoint>
      <rightJoint>chassis_to_right_wheel</rightJoint>
      <wheelSeparation>0.390</wheelSeparation>
      <wheelDiameter>0.1332</wheelDiameter>
      <wheelAcceleration>1</wheelAcceleration>
      <wheelTorque>10</wheelTorque>
      <rosDebugLevel>na</rosDebugLevel>
    </plugin>
  </gazebo>
  <!--Gazebo related physics values of left wheel joint-->
  <gazebo reference="chassis_to_left_wheel">
      <mu1 value="10000.0" />
      <mu2 value="10000.0" />
      <kp value="300" />  <!--500000-->
      <kd value="10" />  <!--10-->
      <kp value="200"/>
      <maxVel value="1.0" />
      <minDepth value="0.0001" />
  </gazebo>
  <!--Gazebo related physics values of right wheel joint-->
  <gazebo reference="chassis_to_right_wheel">
      <mu1 value="10000.0" />
      <mu2 value="10000.0" />
      <kp value="300" />
      <kd value="10" />
      <ki value="200" />
      <maxVel value="1.0" />
      <minDepth value="0.0001" />
  </gazebo>

  <gazebo reference="chassis">
    <material>Gazebo/FlatBlack</material>
  </gazebo>

  <gazebo reference="base">
  </gazebo>

  <gazebo reference="imu_link">
    <sensor type="imu" name="imu">
      <always_on>true</always_on>
      <visualize>false</visualize>
    </sensor>
    <material>Gazebo/Grey</material>
  </gazebo>

  <gazebo reference="left_wheel">
    <material>Gazebo/Grey</material>
  </gazebo>

  <gazebo reference="right_wheel">
    <material>Gazebo/Grey</material>
  </gazebo>

  <gazebo reference="caster1">
    <material>Gazebo/White</material>
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>

  <gazebo reference="caster2">
    <material>Gazebo/White</material>
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>

  <gazebo reference="caster3">
    <material>Gazebo/White</material>
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>

  <gazebo reference="caster4">
    <material>Gazebo/White</material>
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <kp>1000000.0</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>

  <gazebo>
    <plugin name="imu_plugin" filename="libgazebo_ros_imu.so">
      <alwaysOn>true</alwaysOn>
      <bodyName>imu_link</bodyName>
      <frameName>imu_link</frameName>
      <topicName>imu</topicName>
      <serviceName>imu_service</serviceName>
      <gaussianNoise>0.0</gaussianNoise>
      <updateRate>200</updateRate>
      <imu>
        <noise>
          <type>gaussian</type>
          <rate>
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </rate>
          <accel>
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </accel>
        </noise>
      </imu>
    </plugin>
  </gazebo>

  <gazebo reference="hokuyo">
   <sensor type="gpu_ray" name="head_hokuyo_sensor">
    <pose>0 0 0 0 0 0</pose>
    <always_on>1</always_on>
    <update_rate>30</update_rate>
    <visualize>true</visualize>
    <ray>
      <scan>
        <horizontal>
          <!-- The URG-04LX-UG01  has  683 steps with 0.35139 Degree resolution -->
          <resolution>1</resolution>
          <max_angle>1.04719</max_angle> <!-- 120 Degree -->
          <min_angle>-1.04719</min_angle> <!-- -120 Degree -->
          <!--max_angle>3.14</max_angle--> <!-- 120 Degree -->
          <!--min_angle>-3.14</min_angle--> <!-- -120 Degree -->
          <samples>683</samples>
        </horizontal>
      </scan>
      <range>
        <min>0.10</min>
        <max>140.0</max>
        <resolution>0.01</resolution>
      </range>
      <noise>
        <type>gaussian</type>
        <!-- Noise parameters based on published spec for Hokuyo laser
             achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
             stddev of 0.01m will put 99.7% of samples within 0.03m of the true
             reading. -->
        <mean>0.0</mean>
        <stddev>0.01</stddev>
      </noise>
    </ray>
    <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_gpu_laser.so">
      <topicName>laser/scan2</topicName>
      <frameName>hokuyo</frameName>
    </plugin>
   </sensor>
  </gazebo>


  <gazebo reference="rplidar">
    <material>Gazebo/DarkGrey</material>
    <sensor type="gpu_ray" name="head_rplidar_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-1.04719</min_angle>
            <max_angle>1.04719</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.2</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_rplidar_controller" filename="libgazebo_ros_gpu_laser.so">
        <topicName>laser/scan1</topicName>
        <frameName>rplidar</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="zed_camera_link">
   <material>Gazebo/DarkGrey</material>
   <sensor type="camera" name="zed_camera_left_sensor">
   <update_rate>30.0</update_rate>
   <!-- math.atan(320 / 687.8065795898438) * 2 -->
     <camera name="zed_camera_left_camera">
     <horizontal_fov>0.8709216071359963</horizontal_fov>
     <image>
       <width>640</width>
       <height>480</height>
       <format>B8G8R8</format>
     </image>
     <clip>
       <near>0.02</near>
       <far>300</far>
     </clip>
     <noise>
       <type>gaussian</type>
       <mean>0.0</mean>
       <stddev>0.007</stddev>
     </noise>
     </camera>
     <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
       <alwaysOn>false</alwaysOn>
       <updateRate>30.0</updateRate>
       <cameraName>/camera/zed</cameraName>
       <imageTopicName>rgb/image_rect_color</imageTopicName>
       <cameraInfoTopicName>rgb/camera_info</cameraInfoTopicName>
       <frameName>zed_camera_link</frameName>
       <hackBaseline>0</hackBaseline><!-- set this to 0.12 for the second camera -->
       <distortionK1>0.0</distortionK1>
       <distortionK2>0.0</distortionK2>
       <distortionK3>0.0</distortionK3>
       <distortionT1>0.0</distortionT1>
       <distortionT2>0.0</distortionT2>
     </plugin>
   </sensor>
 </gazebo>


</robot>
